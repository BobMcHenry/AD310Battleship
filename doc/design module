The Three Beards
BattleShip
Software Design Description (SDD)

Bob McHenry
Chris Wilson
Jesse Bernoudy
Mario Rodriguez

November 19, 2015



1. Introduction
	1.1 Purpose
	
		This SDD describes the architecture and system design of the Battleship
		game implementation reuquired for AD310 Software Lifecycles final project.
		This SDD will highlight the overall design of our implementation.
		
	1.2 Scope
	
		The scope of this project is to initiate a Battleship game between two players, and
		see the game to its conclusion, i.e. the victory of one player over the other.  We 
		intend for this game to be fun, and enjoyable for anyone, ages 8+.  This implementation 
		of Battleship will be carried out in a degital frame.
		
	1.3 Overview
	
		This document will cover the primary design of this implementation of Battleship, as its
		authors envision the game procedures and the user interfaces. The document is organized in 
		the following way. First we have a system overview will be presented, followed by the system 
		architecture, where the various components of the game will be laid out.  The system architecture
		will be followed by the user interface and concluded with the user interface.
		
	1.4 Reference Material
	
		This implementation of Battleship is inspired by the .pdf game which can be found at 
		http://funorama.com/files/battleships.pdf.  The game will be conducted as described in
		the instruction of that implementation
		
	1.5 Definitions and Acronyms
		The Board - A 10x10 grid of positions/units
		Ships :
			Aircraft Carrier - five units in length
			Battleship - four units in length
			Cruiser - Three units in length
			Destroyers - Two units in length
	
2. System Overview
	
	This program is an implementation of the Battleship game in a digital format.  This implementation 
	attempts to capture the analog version of the game using digital interfaces.  The game will consist of
	two players, setting up five(5) ships each, as described in the Definitions 1.5, on a board that is 10x10 
	square units.  Once the ships have been set the players will take turns attempting to sink the opposing 
	player ships; the first player to accomplish the sinking of his enemie's ships will be crowned the king of 
	everything! Good luck and god speed!
	
3. System Architecture

	3.1 Atchitectural Design.
	
		BattleshipModel - Public Interface.
			Base for all games of Battleship with this implementation
		BattleshipGame - Public class implementing the model.
			Game instantiation for this implementation of Battleship
		Player - Package private helper class.
			Class that defines the player(s), two to be instantiated once game begins,
			creating the to opposing players.
		Board - Package private helper class.
			Class which stores and array of ship objects for updating modle state for 
			ship types stored
		Ship - Package private helper class
			Class that will be used to instantiate the respective ships. Each ship will
			keep track of it's state and will relay that information to the BattleshipGame
			as required.
		Location - Package private helper class
			Class that represents the status of one square on the playing board. 
			Uses a char, int pair as the coordinate system where char maps to the row,
			and int maps to the column.  The column numberrs increase as you move left, 
			thhe rows decreaase with J being the bottom most row.
		ShotResult - Package private helper class
			Class to record shots, this class stores the player who made the shot, shot coordinates,
			and type of ship if applicable
		ShipType - Package private helper class
			Enumeration of ship types supported by the game.
		PlayMode - Package private helper class
			Enumeration for Setup and Playmode.
		
		
	3.2 Decomposition Description
	
		//OO graphic model
		
	3.3 Design Rational
	
		By breaking up the major components for the game action, objects, and state we felt that
		the implementation of the game is much simpler, i.e. every object keeps track of its state
		and reports it as needed as opposed to having one main class do all of the heavy lifting.
		In simpler terms the idea was that a plyer has a board, a board has the ships, the ships have
		states (hit, or not).
	
4. Data Design
	4.1 Data Description
	
		The instantiation of a game object will be initiated by the Controler/View (CV) component of the
		Battleship package.  From initiation to game setup each class will instantiate the next class, i.e.
		the BattleshipGame will create two players, each player will create their boards that will create 
		ships.  The ships will keep track of their state and report up the chain to update the game Model as 
		needed.  The board will keep track of ship position and shots.  Each player will have a board that will
		keep track of their play. All states will be held by their respective object in private fields, no database
		or duplicate fields higher up on the chain are utilized or allowed.
		
		
	4.2 Data Dictionary
	
		BattleshipGame:
			Fields
				Player p1;
				Player p2;
				Player activePlayer;
				
			Methods
				getPlayMode();
				setPlayMode(PlayMode value);
				getActivePlayer();
				setActivePlayer(Player p);
				resetGame();
				getPlayerBoard(Player p);
				placeShip(Player p, Ship s, Location head, Location tail);
				getShipLocations(Player p, ShipType st);
				makeShot(Player p, Location target);
				getWinner();
				isGameOver();
		Board(s):
			Fields
				Ship[] ships;
				ShotResult[] shotReport;
			
			Methods
				getShip();
				getShots();
				
		Location
			Fields
				String VALID_ROWS = "AaBbCcDcEeFeGgHhJj";
				char row;
				int column;
				Status state;
				
			Methods
				getRow();
				getColumn();
				getStatus();
				setStatus();
		Player
			Fields
				String name;
				Board pBoard;
				
			Methods
				getBoard();
				getName();
				
		Ship
			Fields
				ShipType type;
				
			Methods
				getShipType();
				getLocation();
				isSunk();
				getSize();
				getCoords();
				
		ShotResults
			Fields
				Player shootingPlayer;
				Location shotCoords:
				ShipType hitShip;
				
			Methods
				getShootingPlayer();
				getShotCoords;
				get hitShip();
		
	
5. Procedural Design
	
	

6. Human Interface Design
	6.1 Overview of User Interface //
	6.2 Screen Images // if any
	6.3 Screen objects and Actions //
	
7. Requrements Matrix
